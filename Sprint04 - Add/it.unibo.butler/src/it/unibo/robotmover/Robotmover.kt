/* Generated by AN DISI Unibo */ 
package it.unibo.robotmover

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmover ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						updateResourceRep( "notmoving"  
						)
					}
					 transition(edgeName="t017",targetState="moving",cond=whenRequest("goto"))
				}	 
				state("moving") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goto(Destination)"), Term.createTerm("goto(Destination)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "moving"  
								)
								println("Robot mover	| going to ${payloadArg(0)}")
								delay(1000) 
								answer("goto", "arrivedat", "arrivedat(${payloadArg(0)})"   )  
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
