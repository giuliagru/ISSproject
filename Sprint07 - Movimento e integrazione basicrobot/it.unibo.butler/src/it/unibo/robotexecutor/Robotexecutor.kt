/* Generated by AN DISI Unibo */ 
package it.unibo.robotexecutor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotexecutor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('preparerequirements.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						updateResourceRep( "athome"  
						)
					}
					 transition(edgeName="t06",targetState="handleprepare",cond=whenDispatch("prepare"))
					transition(edgeName="t07",targetState="handleadd",cond=whenDispatch("add"))
					transition(edgeName="t08",targetState="handleclear",cond=whenDispatch("clear"))
				}	 
				state("handleprepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepare(Cmd)"), Term.createTerm("prepare(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "startprepare"  
								)
								println("Robot executor | Prepare: start")
								request("goto", "goto(pantry)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t19",targetState="atpantry",cond=whenReply("arrivedat"))
				}	 
				state("atpantry") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(pantry)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "atpantry"  
								)
								forward("updateState", "updateState(preparedishes)" ,"roomstate" ) 
								println("Robot executor | Prepare: dishes taken")
								request("goto", "goto(table)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t210",targetState="attable_dishes",cond=whenReply("arrivedat"))
				}	 
				state("attable_dishes") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "attable_dishes"  
								)
								forward("updateState", "updateState(action(put,table,dishes))" ,"roomstate" ) 
								println("Robot executor | Prepare: dishes on table ")
								request("goto", "goto(fridge)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t311",targetState="atfridge",cond=whenReply("arrivedat"))
				}	 
				state("atfridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "atfridge"  
								)
								solve("food(F)","") //set resVar	
								forward("take_foodlist", "take_foodlist(${getCurSol("F")})" ,"fridge" ) 
								forward("updateState", "updateState(preparefood)" ,"roomstate" ) 
								println("Robot executor | Prepare: food taken")
								request("goto", "goto(table)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t512",targetState="attable_food",cond=whenReply("arrivedat"))
				}	 
				state("attable_food") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "attable_food"  
								)
								forward("updateState", "updateState(action(put,table,food))" ,"roomstate" ) 
								println("Robot executor | Prepare/Add: food on table")
								request("goto", "goto(home)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t613",targetState="endTask",cond=whenReply("arrivedat"))
				}	 
				state("endTask") { //this:State
					action { //it:State
						updateResourceRep( "endtask"  
						)
						println("Robot executor | Action: end")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleadd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("add(Foodcode,Quantity)"), Term.createTerm("add(Food,Quantity)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "startadd"  
								)
								println("Robot executor | Add: start")
								request("check_food", "check_food(${payloadArg(0)},${payloadArg(1)})" ,"fridge" )  
						}
					}
					 transition(edgeName="t714",targetState="tofridge",cond=whenReply("food_available"))
					transition(edgeName="t715",targetState="alertMaitre",cond=whenReply("food_notavailable"))
				}	 
				state("tofridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("food_available(Foodcode,Quantity)"), Term.createTerm("food_available(Foodcode,Quantity)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "foodavailable"  
								)
								println("Robot executor | Add: ${payloadArg(0)} ${payloadArg(1)} available")
								solve("assert(remember(${payloadArg(0)},${payloadArg(1)}))","") //set resVar	
								request("goto", "goto(fridge)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t816",targetState="takefood",cond=whenReply("arrivedat"))
				}	 
				state("takefood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "atfridge"  
								)
								solve("retract(remember(F,Q))","") //set resVar	
								if( currentSolution.isSuccess() ) {
													var Foodcode = getCurSol("F").toString() 
													var Quantity = getCurSol("Q").toString() 
								forward("take_food", "take_food($Foodcode,$Quantity)" ,"fridge" ) 
								forward("updateState", "updateState(action(take,fridge,food,$Foodcode,$Quantity))" ,"roomstate" ) 
								}
								else
								{}
								println("Robot executor | Add: food taken")
								request("goto", "goto(table)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t1017",targetState="attable_food",cond=whenReply("arrivedat"))
				}	 
				state("alertMaitre") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("food_notavailable(Foodcode,Quantity)"), Term.createTerm("food_notavailable(Foodcode,Quantity)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "foodnotavailable"  
								)
								println("Robot executor | Add: ${payloadArg(0)} ${payloadArg(1)} not available")
								forward("food_notavailable", "food_notavailable(${payloadArg(0)},${payloadArg(1)})" ,"maitre" ) 
						}
					}
					 transition( edgeName="goto",targetState="endTask", cond=doswitch() )
				}	 
				state("handleclear") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clear(Cmd)"), Term.createTerm("clear(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "startclear"  
								)
								println("Robot executor | Clear: start")
								request("goto", "goto(table)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t1118",targetState="cleartable_food",cond=whenReply("arrivedat"))
				}	 
				state("cleartable_food") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "attable"  
								)
								forward("updateState", "updateState(action(take,table,food))" ,"roomstate" ) 
								println("Robot executor | Clear: food taken from table")
								request("goto", "goto(fridge)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t1219",targetState="leftoverstofridge",cond=whenReply("arrivedat"))
				}	 
				state("leftoverstofridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "atfridge"  
								)
								forward("updateState", "updateState(action(put,fridge,food))" ,"roomstate" ) 
								println("Robot executor | Clear: leftovers in the fridge")
								request("goto", "goto(table)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t1320",targetState="cleartable_dishes",cond=whenReply("arrivedat"))
				}	 
				state("cleartable_dishes") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "attable"  
								)
								forward("updateState", "updateState(action(take,table,dishes))" ,"roomstate" ) 
								println("Robot executor | Clear: dishes taken from table")
								request("goto", "goto(dishwasher)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t1421",targetState="dishestodishwasher",cond=whenReply("arrivedat"))
				}	 
				state("dishestodishwasher") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(dishwasher)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "atdishwasher"  
								)
								forward("updateState", "updateState(action(put,dishwasher,dishes))" ,"roomstate" ) 
								println("Robot executor | Clear: dishes in the dishwasher")
								request("goto", "goto(home)" ,"robotmover" )  
						}
					}
					 transition(edgeName="t1522",targetState="endTask",cond=whenReply("arrivedat"))
				}	 
			}
		}
}
