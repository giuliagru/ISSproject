System boundaryrobot
//mqttBroker "broker.hivemq.com" : 1883

Dispatch cmd       : cmd(MOVE)
Dispatch end       : end(ARG)


Request  step      : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)

Context ctxBoundaryrobot ip [host="127.0.0.1" port=8030]
Context ctxBasicrobot    ip [host="localhost" port=8018]

ExternalQActor basicrobot context ctxBasicrobot //must be active ..

QActor boundaryrobot context ctxBoundaryrobot{
["var nstep    = 0
  val StepTime = 350
"]
	State s0 initial { 	
 		println("boundaryrobot starts")
		println("${mapRoomKotlin.mapUtil.refMapForTesting}")
		println("-----------------")
		run mapRoomKotlin.mapUtil.showMap()  //initial map empty
		delay 2000  //just to look at the reference map and the current map
	}
	Goto work 
	
	State work{
		request basicrobot -m step : step($StepTime)
	}
	Transition t0 whenReply stepdone -> stepDone
				  whenReply stepfail -> stepFail
	
	State stepDone{
		//change the map
		run mapRoomKotlin.mapUtil.doMove("w")
		run mapRoomKotlin.mapUtil.showMap()
		delay 500
	}
	Goto work
	
	State stepFail{
		printCurrentMessage
		["nstep++
		var Dt = 0L 			
		"]
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[" Dt = payloadArg(0).toLong() 
			"]
			println("boundaryrobot stepFail after: $Dt")
			forward basicrobot -m cmd : cmd( s )
			delayVar Dt
			forward basicrobot -m cmd : cmd( h )	
			delay 500		
		}
		//change the map
		forward basicrobot -m cmd : cmd(l)
		delay 500
		run mapRoomKotlin.mapUtil.doMove("l")
	}
	Goto work if "(nstep<4)" else endWork
	
	State endWork{
		println("boundaryrobot ends")
		run mapRoomKotlin.mapUtil.showMap()
	}
}