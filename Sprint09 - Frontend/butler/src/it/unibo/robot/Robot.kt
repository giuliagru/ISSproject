/* Generated by AN DISI Unibo */ 
package it.unibo.robot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t026",targetState="handleprepare",cond=whenDispatch("prepare"))
					transition(edgeName="t027",targetState="handleadd",cond=whenDispatch("add"))
					transition(edgeName="t028",targetState="handleclear",cond=whenDispatch("clear"))
				}	 
				state("handleprepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepare(Cmd)"), Term.createTerm("prepare(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("prepare", "prepare(${payloadArg(0)})" ,"robotexecutor" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleadd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("add(Foodcode,Quantity)"), Term.createTerm("add(Foodcode,Quantity)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("add", "add(${payloadArg(0)},${payloadArg(1)})" ,"robotexecutor" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleclear") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clear(Cmd)"), Term.createTerm("clear(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("clear", "clear(${payloadArg(0)})" ,"robotexecutor" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
