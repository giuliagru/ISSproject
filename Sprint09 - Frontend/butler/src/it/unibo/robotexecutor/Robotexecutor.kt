/* Generated by AN DISI Unibo */ 
package it.unibo.robotexecutor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotexecutor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			val my = myself		 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('preparerequirements.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t09",targetState="handleprepare",cond=whenDispatch("prepare"))
					transition(edgeName="t010",targetState="handleadd",cond=whenDispatch("add"))
					transition(edgeName="t011",targetState="handleclear",cond=whenDispatch("clear"))
				}	 
				state("handleprepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepare(Cmd)"), Term.createTerm("prepare(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Prepare: start")
								utils.utilsFrontend.updateTaskFrontend( my, ":PREPARE"  )
								forward("goto", "goto(pantry)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t112",targetState="atpantry",cond=whenDispatch("arrivedat"))
				}	 
				state("atpantry") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(pantry)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("updateState", "updateState(preparedishes)" ,"roomstate" ) 
								println("dishes taken")
								forward("goto", "goto(table)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t213",targetState="attable_dishes",cond=whenDispatch("arrivedat"))
				}	 
				state("attable_dishes") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("updateState", "updateState(action(put,table,dishes))" ,"roomstate" ) 
								println("dishes on table ")
								forward("goto", "goto(fridge)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t314",targetState="atfridge",cond=whenDispatch("arrivedat"))
				}	 
				state("atfridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("food(F)","") //set resVar	
								forward("take_foodlist", "take_foodlist(${getCurSol("F")})" ,"fridge" ) 
								forward("updateState", "updateState(preparefood)" ,"roomstate" ) 
								println("food taken")
								forward("goto", "goto(table)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t515",targetState="attable_food",cond=whenDispatch("arrivedat"))
				}	 
				state("attable_food") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("updateState", "updateState(action(put,table,food))" ,"roomstate" ) 
								println("food on table")
								forward("goto", "goto(home)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t616",targetState="endPrepare",cond=whenDispatch("arrivedat"))
				}	 
				state("endPrepare") { //this:State
					action { //it:State
						println("")
						println("ADD: State AddFoodEnded")
						println("ADD terminata")
						utils.utilsFrontend.updateFrontend( my, "endPrepare"  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleadd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("add(Foodcode,Quantity)"), Term.createTerm("add(Food,Quantity)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								utils.utilsFrontend.updateTaskFrontend( my, ":ADD"  )
								println("\nAdd: start")
								println("check food ${payloadArg(0)}")
						}
						request("check_food", "check_food(${payloadArg(0)},${payloadArg(1)})" ,"fridge" )  
					}
					 transition(edgeName="t717",targetState="tofridge",cond=whenReply("food_available"))
					transition(edgeName="t718",targetState="alertMaitre",cond=whenReply("food_notavailable"))
				}	 
				state("tofridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("food_available(Foodcode,Quantity)"), Term.createTerm("food_available(Foodcode,Quantity)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("${payloadArg(0)} ${payloadArg(1)} available")
								forward("take_food", "take_food(${payloadArg(0)},${payloadArg(1)})" ,"fridge" ) 
								forward("updateState", "updateState(action(take,fridge,food,${payloadArg(0)},${payloadArg(1)}))" ,"roomstate" ) 
								forward("goto", "goto(fridge)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t819",targetState="takefood",cond=whenDispatch("arrivedat"))
				}	 
				state("takefood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("food taken")
								forward("goto", "goto(table)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t1020",targetState="attable_food",cond=whenDispatch("arrivedat"))
				}	 
				state("alertMaitre") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("food_notavailable(Foodcode,Quantity)"), Term.createTerm("food_notavailable(Foodcode,Quantity)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("${payloadArg(0)} not available")
								utils.utilsFrontend.updateFrontend( my, "warning"  )
								forward("food_notavailable", "food_notavailable(${payloadArg(0)},${payloadArg(1)})" ,"maitre" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleclear") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clear(Cmd)"), Term.createTerm("clear(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								utils.utilsFrontend.updateTaskFrontend( my, ":CLEAR"  )
								println("\nClear: start")
								forward("goto", "goto(table)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t1121",targetState="cleartable_food",cond=whenDispatch("arrivedat"))
				}	 
				state("cleartable_food") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("updateState", "updateState(action(take,table,food))" ,"roomstate" ) 
								println("food taken from table")
								forward("goto", "goto(fridge)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t1222",targetState="leftoverstofridge",cond=whenDispatch("arrivedat"))
				}	 
				state("leftoverstofridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("updateState", "updateState(action(put,fridge,food))" ,"roomstate" ) 
								println("leftovers in the fridge")
								forward("goto", "goto(table)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t1323",targetState="cleartable_dishes",cond=whenDispatch("arrivedat"))
				}	 
				state("cleartable_dishes") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("updateState", "updateState(action(take,table,dishes))" ,"roomstate" ) 
								println("dishes taken from table")
								forward("goto", "goto(dishwasher)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t1424",targetState="dishestodishwasher",cond=whenDispatch("arrivedat"))
				}	 
				state("dishestodishwasher") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrivedat(Destination)"), Term.createTerm("arrivedat(dishwasher)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("updateState", "updateState(action(put,dishwasher,dishes))" ,"roomstate" ) 
								println("dishes in the dishwasher")
								forward("goto", "goto(home)" ,"robotmover" ) 
						}
					}
					 transition(edgeName="t1525",targetState="endClear",cond=whenDispatch("arrivedat"))
				}	 
				state("endClear") { //this:State
					action { //it:State
						println("")
						println("CLEAR: State ClearEnded")
						println("CLEAR terminata")
						utils.utilsFrontend.updateFrontend( my, "endClear"  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
