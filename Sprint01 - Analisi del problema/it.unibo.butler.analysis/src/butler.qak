System butler
//ANALYSIS MODEL

Dispatch prepare : prepare(Cmd)
Dispatch clear : clear(Cmd)
Dispatch add : add(Foodcode)

Dispatch stop : stop(Cmd)
Dispatch reactivate : reactivate(Cmd)

Dispatch robotstate : robotstate(Cmd)

Dispatch fridgestate : fridgestate(Cmd)
Dispatch check_food : check_food(Foodcode)

Dispatch food_available : food_available(Foodcode)
Dispatch food_not_available : food_not_available(Foodcode)

Dispatch test : test(0)

Event prepare_button : prepare_button(Cmd)
Event clear_button : clear_button(Cmd)
Event add_button : add_button(Foodcode)
Event stop_button : stop_button(Cmd)
Event reactivate_button : reactivate_button(Cmd)
Event roomstate : roomstate(Cmd)

Context ctxrobot ip [host="localhost" port=8038]  
Context ctxmaitre ip [host="localhost" port=8094]
Context ctxfridge ip [host="localhost" port=8092]

//ROBOT
QActor robot context ctxrobot{
	State s0 initial{
		println("Butler | Ready")
	}
	Goto waitCmd
		
	State waitCmd{}
	Transition to
		whenMsg prepare -> prepare
		whenMsg add -> add
		whenMsg clear -> clear
		whenMsg robotstate -> exposestate
	
	State prepare{
		onMsg (prepare: prepare(X)){
			println("Butler | Requirement: PREPARE started")
			updateResource [# "preparestarted" #]
	
		}
	}
	Transition t0 
		whenTime 2000  -> endAction
		whenMsg  stop -> stopped 
	
	State add{
		onMsg (add: add(X)){
			println("Butler | Requirement: ADD started")
			updateResource [# "addstarted" #]
			println("Butler | Requirement: ADD check food")
			forward fridge -m check_food : check_food($payloadArg(0))
		}
	}
	Transition t0  
		whenMsg food_available -> reactivated
		whenMsg food_not_available -> alertMaitre
		
	State alertMaitre{
		onMsg (food_not_available : food_not_available(Foodcode)){
			println("Butler | Requirement: ALERT maitre that food isn't available")
			forward maitre -m food_not_available : food_not_available($payloadArg(0))
		}
	}Goto waitCmd
	
	State clear{
		onMsg (clear: clear(X)){
			println("Butler | Requirement: CLEAR started")
			updateResource [# "clearstarted" #]
		}
	}
	Transition t0 
		whenTime 2000  -> endAction
		whenMsg  stop -> stopped 
			
	State stopped{
		updateResource [# "stopped" #]
		println("Butler | Requirement: STOP action")	
	}
	Transition t0 whenMsg reactivate  -> reactivated
	
	State reactivated{
		updateResource [# "reactivated" #]
		println("Butler | Requirement: CONTINUE action")
	}Transition t0 
		whenTime 2000  -> endAction
		whenMsg  stop -> stopped
	 
 	State endAction{
 		updateResource [# "ended" #]
		println("Butler | Requirement: END action")

 	}Goto waitCmd
 	
 	State exposestate{
 		updateResource [# "exposestate" #]
		println("Butler | Requirement: EXPOSE robot state")
 	}Goto waitCmd	
}

//FRIDGE
QActor fridge context ctxfridge{
	State s0 initial{
		println("Fridge | Ready
	}Goto waitCmd
	
	State waitCmd{	}
	Transition t0
		whenMsg check_food -> check
		whenMsg fridgestate -> exposestate
	
	State check{
		updateResource [# "checkfood" #]
		println("Fridge | Requirement: CHECK food presence")
		delay 500
		onMsg(check_food : check_food(pizza)){
			forward robot -m food_available : food_available(pizza)
		}
		onMsg(check_food : check_food(pasta)){
			forward robot -m food_not_available : food_not_available(pasta)
		}
	}
	Goto waitCmd
	
	State exposestate{
		updateResource [# "exposestate" #]
		println("Fridge | Requirement: EXPOSE FRIDGE STATE")
	}	
	Goto waitCmd	
}

//MAITRE
QActor maitre context ctxmaitre {
	State s0 initial{
		println("Maitre | Ready")
	}
	Goto waitCmdPrepare
	
	State waitCmdPrepare{}
	Transition t0
		whenEvent prepare_button -> prepare
	
	State waitCmd{}
	Transition t1
		whenEvent add_button -> add
		whenEvent clear_button -> clear
		whenEvent stop_button -> stoprobot
		whenEvent roomstate -> consultroom
		whenMsg food_not_available -> handlerobotmsg
		
	State prepare {
		onMsg(prepare_button: prepare_button(X)){
			println("Maitre | Requirement: PREPARE")
			updateResource [# "prepare" #]
			forward robot -m prepare : prepare(Cmd)
		}
	}	
	Goto waitCmd
		
	State add {
		onMsg(add_button: add_button(X)){
			println("Maitre | Requirement: ADD")
			updateResource [# "add" #]
			forward robot -m add : add($payloadArg(0))
		}
	}	
	Goto waitCmd
		
	State clear {
		onMsg(clear_button: clear_button(X)){
			println("Maitre | Requirement: CLEAR")
			updateResource [# "clear" #]
			forward robot -m clear : clear(Cmd)
		}
	}
	Goto waitCmdPrepare
	
	State stoprobot{
		println("Maitre | Requirement: STOP")
		updateResource [# "stoprobot" #]
		forward robot -m stop : stop(Action)
	}
	Transition t1
	whenEvent reactivate_button -> reactivaterobot
	
	State reactivaterobot{
		println("Maitre | Requirement: REACTIVATE")
		updateResource [# "reactivaterobot" #]
		forward robot -m reactivate : reactivate(Action)
	}
	Goto waitCmd
	
	State consultroom{
		println("Maitre | Requirement: CONSULT ROOM")
		updateResource [# "consultroom" #]
	}
	Goto waitCmd
	
	State handlerobotmsg{
		onMsg (food_not_available: food_not_available(Foodcode)){
			println("Maitre | knows ${payloadArg(0)} isn't available")
		}
	}
	Goto waitCmd
}

QActor user context ctxmaitre{
	State s0 initial{
	} Transition t0 
		whenTime 3000 -> emitCmd
		whenMsg  test -> end
	
	State emitCmd{	
		delay 2000
		emit prepare_button : prepare_button(clicked)
		delay 500
        emit stop_button : stop_button(clicked)
        delay 500
        emit reactivate_button : reactivate_button(clicked)

        delay 5000
        emit add_button : add_button(pizza)
        
        delay 5000
        emit add_button : add_button(pasta)
         
        delay 5000
        emit clear_button : clear_button(clicked)
	}
	
	State end {
		terminate 0
	}
}