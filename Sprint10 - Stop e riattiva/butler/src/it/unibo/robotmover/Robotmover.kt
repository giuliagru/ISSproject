/* Generated by AN DISI Unibo */ 
package it.unibo.robotmover

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmover ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		  
				val map = "roommap"
				var Curmove     = "" 
				var curmoveIsForward = false 
				var Direction = ""
				
				//REAL ROBOT
				//var StepTime   = 1000 	 
				//var PauseTime  = 500 
				
				//VIRTUAL ROBOT
				var StepTime   = 330	//for virtual
				var PauseTime  = 500
				
				var PauseTimeL  = PauseTime.toLong()
				val my = myself
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('roomcoordinates.pl')","") //set resVar	
						solve("consult('moves.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
						 itunibo.planner.moveUtils.loadRoomMap(myself, map) 
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t04",targetState="moving",cond=whenDispatch("goto"))
				}	 
				state("moving") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goto(Destination)"), Term.createTerm("goto(Destination)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("going to ${payloadArg(0)}")
								solve("position(${payloadArg(0)},X,Y,D)","") //set resVar	
								
												
												val X = getCurSol("X").toString()
												val Y = getCurSol("Y").toString()
												Direction = getCurSol("D").toString()
												val dest =":" + payloadArg(0) +" (" + X + "," +Y+")"
								utils.utilsFrontend.updateGoalToFrontend( my, dest  )
								itunibo.planner.plannerUtil.setGoal( X, Y  )
								 itunibo.planner.moveUtils.doPlan( myself ) 
						}
					}
					 transition( edgeName="goto",targetState="execplanaction", cond=doswitch() )
				}	 
				state("execplanaction") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if( currentSolution.isSuccess() ) {Curmove = getCurSol("M").toString() 
							              curmoveIsForward=(Curmove == "w")
						}
						else
						{Curmove = ""; curmoveIsForward=false 
						}
					}
					 transition( edgeName="goto",targetState="checkAndDoAction", cond=doswitchGuarded({(Curmove.length>0) 
					}) )
					transition( edgeName="goto",targetState="goalOk", cond=doswitchGuarded({! ((Curmove.length>0) 
					) }) )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						itunibo.applUtil.applUtil.changeDirection( myself, Direction ) 
						forward("arrivedat", "arrivedat(${payloadArg(0)})" ,"robotexecutor" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("checkAndDoAction") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="doForwardMove", cond=doswitchGuarded({curmoveIsForward 
					}) )
					transition( edgeName="goto",targetState="doTheMove", cond=doswitchGuarded({! (curmoveIsForward 
					) }) )
				}	 
				state("doTheMove") { //this:State
					action { //it:State
						delay(PauseTimeL)
						itunibo.planner.moveUtils.rotate(myself, Curmove, PauseTime) 
					}
					 transition( edgeName="goto",targetState="execplanaction", cond=doswitch() )
				}	 
				state("doForwardMove") { //this:State
					action { //it:State
						delay(PauseTimeL)
						request("step", "step($StepTime)" ,"basicrobot" )  
					}
					 transition(edgeName="t05",targetState="handleStopAppl",cond=whenDispatch("stop"))
					transition(edgeName="t06",targetState="handleStepOk",cond=whenReply("stepdone"))
					transition(edgeName="t07",targetState="hadleStepFail",cond=whenReply("stepfail"))
				}	 
				state("handleStopAppl") { //this:State
					action { //it:State
						println("APPLICATION STOPPED. Waiting for a reactivate")
					}
					 transition(edgeName="t08",targetState="handleReactivateAppl",cond=whenDispatch("start"))
				}	 
				state("handleReactivateAppl") { //this:State
					action { //it:State
						println("APPLICATION RESUMED")
					}
					 transition(edgeName="t09",targetState="handleStepOk",cond=whenReply("stepdone"))
					transition(edgeName="t010",targetState="hadleStepFail",cond=whenReply("stepfail"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
						 		var c = ":" + utils.stringFormat.formatPosition(my) 
						utils.utilsFrontend.updatePositionFrontend( my, c  )
					}
					 transition( edgeName="goto",targetState="execplanaction", cond=doswitch() )
				}	 
				state("hadleStepFail") { //this:State
					action { //it:State
						println("NEVER HERE!!!")
						val ButlerDirection = itunibo.planner.moveUtils.getDirection(myself) 
						println("ButlerDirection = $ButlerDirection")
						forward("cmd", "cmd(s)" ,"basicrobot" ) 
						delay(50) 
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="execplanaction", cond=doswitch() )
				}	 
			}
		}
}
